/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    debounceTimeout: 300,
    ignoreOpenFiles: false,
    ignoreForceViewAll: false,
    folders: [{ folder: '', viewMode: '' }],
    files: [{ filePattern: '', viewMode: '' }],
};
class ViewModeByFrontmatterPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.OBSIDIAN_UI_MODE_KEY = "obsidianUIMode";
        this.OBSIDIAN_EDITING_MODE_KEY = "obsidianEditingMode";
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new ViewModeByFrontmatterSettingTab(this.app, this));
            this.openedFiles = resetOpenedNotes(this.app);
            const readViewModeFromFrontmatterAndToggle = (leaf) => __awaiter(this, void 0, void 0, function* () {
                let view = leaf.view instanceof obsidian.MarkdownView ? leaf.view : null;
                if (null === view) {
                    if (true == this.settings.ignoreOpenFiles) {
                        this.openedFiles = resetOpenedNotes(this.app);
                    }
                    return;
                }
                // if setting is true, nothing to do if this was an open note
                if (true == this.settings.ignoreOpenFiles &&
                    alreadyOpen(view.file, this.openedFiles)) {
                    this.openedFiles = resetOpenedNotes(this.app);
                    return;
                }
                let state = leaf.getViewState();
                // check if in a declared folder or file
                let folderOrFileModeState = null;
                const setFolderOrFileModeState = (viewMode) => {
                    const [key, mode] = viewMode.split(":").map((s) => s.trim());
                    if (key === "默认") {
                        folderOrFileModeState = null; // ensures that no state is set
                        return;
                    }
                    else if (!["live", "preview", "source"].includes(mode)) {
                        return;
                    }
                    folderOrFileModeState = Object.assign({}, state.state);
                    folderOrFileModeState.mode = mode;
                    switch (key) {
                        case this.OBSIDIAN_EDITING_MODE_KEY: {
                            if (mode == "live") {
                                folderOrFileModeState.source = false;
                                folderOrFileModeState.mode = "source";
                            }
                            else {
                                folderOrFileModeState.source = true;
                            }
                            break;
                        }
                        case this.OBSIDIAN_UI_MODE_KEY:
                            folderOrFileModeState.source = false;
                            break;
                    }
                };
                for (const folderMode of this.settings.folders) {
                    if (folderMode.folder !== '' && folderMode.viewMode) {
                        const folder = this.app.vault.getAbstractFileByPath(folderMode.folder);
                        if (folder instanceof obsidian.TFolder) {
                            if (view.file.parent === folder || view.file.parent.path.startsWith(folder.path)) {
                                if (!state.state) { // just to be on the safe side
                                    continue;
                                }
                                setFolderOrFileModeState(folderMode.viewMode);
                            }
                        }
                        else {
                            console.warn(`ForceViewMode: Folder ${folderMode.folder} does not exist or is not a folder.`);
                        }
                    }
                }
                for (const { filePattern, viewMode } of this.settings.files) {
                    if (!filePattern || !viewMode) {
                        continue;
                    }
                    if (!state.state) {
                        // just to be on the safe side
                        continue;
                    }
                    if (!view.file.basename.match(filePattern)) {
                        continue;
                    }
                    setFolderOrFileModeState(viewMode);
                }
                if (folderOrFileModeState) {
                    if (state.state.mode !== folderOrFileModeState.mode ||
                        state.state.source !== folderOrFileModeState.source) {
                        state.state.mode = folderOrFileModeState.mode;
                        state.state.source = folderOrFileModeState.source;
                        yield leaf.setViewState(state);
                    }
                    return;
                }
                // ... get frontmatter data and search for a key indicating the desired view mode
                // and when the given key is present ... set it to the declared mode
                const fileCache = this.app.metadataCache.getFileCache(view.file);
                const fileDeclaredUIMode = fileCache !== null && fileCache.frontmatter
                    ? fileCache.frontmatter[this.OBSIDIAN_UI_MODE_KEY]
                    : null;
                const fileDeclaredEditingMode = fileCache !== null && fileCache.frontmatter
                    ? fileCache.frontmatter[this.OBSIDIAN_EDITING_MODE_KEY]
                    : null;
                if (fileDeclaredUIMode) {
                    if (["source", "preview", "live"].includes(fileDeclaredUIMode) &&
                        view.getMode() !== fileDeclaredUIMode) {
                        state.state.mode = fileDeclaredUIMode;
                    }
                }
                if (fileDeclaredEditingMode) {
                    const shouldBeSourceMode = fileDeclaredEditingMode == 'source';
                    if (["source", "live"].includes(fileDeclaredEditingMode)) {
                        state.state.source = shouldBeSourceMode;
                    }
                }
                if (fileDeclaredUIMode || fileDeclaredEditingMode) {
                    yield leaf.setViewState(state);
                    if (true == this.settings.ignoreOpenFiles) {
                        this.openedFiles = resetOpenedNotes(this.app);
                    }
                    return;
                }
                const defaultViewMode = this.app.vault.config.defaultViewMode
                    ? this.app.vault.config.defaultViewMode
                    : "source";
                const defaultEditingModeIsLivePreview = this.app.vault.config.livePreview === undefined ? true : this.app.vault.config.livePreview;
                if (!this.settings.ignoreForceViewAll) {
                    let state = leaf.getViewState();
                    if (view.getMode() !== defaultViewMode) {
                        state.state.mode = defaultViewMode;
                    }
                    state.state.source = defaultEditingModeIsLivePreview ? false : true;
                    yield leaf.setViewState(state);
                    this.openedFiles = resetOpenedNotes(this.app);
                }
                return;
            });
            // "active-leaf-change": open note, navigate to note -> will check whether
            // the view mode needs to be set; default view mode setting is ignored.
            this.registerEvent(this.app.workspace.on("active-leaf-change", this.settings.debounceTimeout === 0
                ? readViewModeFromFrontmatterAndToggle
                : obsidian.debounce(readViewModeFromFrontmatterAndToggle, this.settings.debounceTimeout)));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.openedFiles = [];
        });
    }
}
function alreadyOpen(currFile, openedFiles) {
    const leavesWithSameNote = [];
    if (currFile == null) {
        return false;
    }
    openedFiles.forEach((openedFile) => {
        if (openedFile == currFile.basename) {
            leavesWithSameNote.push(openedFile);
        }
    });
    return leavesWithSameNote.length != 0;
}
function resetOpenedNotes(app) {
    let openedFiles = [];
    app.workspace.iterateAllLeaves((leaf) => {
        var _a, _b;
        let view = leaf.view instanceof obsidian.MarkdownView ? leaf.view : null;
        if (null === view) {
            return;
        }
        openedFiles.push((_b = (_a = leaf.view) === null || _a === void 0 ? void 0 : _a.file) === null || _b === void 0 ? void 0 : _b.basename);
    });
    return openedFiles;
}
class ViewModeByFrontmatterSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        const createHeader = (text) => containerEl.createEl("h2", { text });
        const desc = document.createDocumentFragment();
        desc.append("更改视图模式可通过属性 ", desc.createEl("code", { text: "obsidianUIMode" }), " ，其值可以是 ", desc.createEl("code", { text: "source" }), " or ", desc.createEl("code", { text: "preview" }), ".（分别代表“编辑模式”和“阅读模式”）", desc.createEl("br"), "更改编辑模式可通过属性 ", desc.createEl("code", { text: "obsidianEditingMode" }), " ，其值可以是 ", desc.createEl("code", { text: "live" }), " or ", desc.createEl("code", { text: "source" }), ".（分别代表“实时预览”和“源码模式”）");
        new obsidian.Setting(this.containerEl).setDesc(desc);
        new obsidian.Setting(containerEl)
            .setName("忽略打开的文件")
            .setDesc("永不更改已打开的笔记的视图模式。")
            .addToggle((checkbox) => checkbox
            .setValue(this.plugin.settings.ignoreOpenFiles)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.ignoreOpenFiles = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("不在属性中时，忽略强制视图")
            .setDesc("永不更改在特定视图模式下从另一个笔记打开的笔记的视图模式")
            .addToggle((checkbox) => {
            checkbox
                .setValue(this.plugin.settings.ignoreForceViewAll)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreForceViewAll = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("防抖超时（以毫秒为单位）")
            .setDesc(`防抖超时是设置视图模式的时间（以毫秒为单位）。设置 “0” 以禁用防抖动 （默认值为 “300”）。如果您在使用插件时遇到问题，请尝试增加此值。`)
            .addText((cb) => {
            cb.setValue(String(this.plugin.settings.debounceTimeout)).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.debounceTimeout = Number(value);
                yield this.plugin.saveSettings();
            }));
        });
        const modes = [
            "默认",
            "obsidian视图模式：阅读模式",
            "obsidian视图模式：编辑模式",
            "obsidian编辑模式：实时预览",
            "obsidian编辑模式：源码模式",
        ];
        createHeader("文件夹");
        const folderDesc = document.createDocumentFragment();
        folderDesc.append("为指定文件夹中的笔记指定一种视图模式。", folderDesc.createEl("br"), "请注意，这将在文件夹中的所有笔记上强制使用该视图模式，即使这些笔记的属性中设置了不同的视图模式也是如此。", folderDesc.createEl("br"), "优先级从下（最高）到上（最低），因此如果指定了子文件夹，请确保将它们放在父文件夹的下面。");
        new obsidian.Setting(this.containerEl).setDesc(folderDesc);
        new obsidian.Setting(this.containerEl)
            .setDesc("添加新文件夹")
            .addButton((button) => {
            button
                .setTooltip("向列表添加其他文件夹")
                .setButtonText("+")
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.folders.push({
                    folder: "",
                    viewMode: "",
                });
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        this.plugin.settings.folders.forEach((folderMode, index) => {
            const div = containerEl.createEl("div");
            div.addClass("force-view-mode-div");
            div.addClass("force-view-mode-folder");
            const s = new obsidian.Setting(this.containerEl)
                .addSearch((cb) => {
                cb.setPlaceholder("例如： folder1/templates")
                    .setValue(folderMode.folder)
                    .onChange((newFolder) => __awaiter(this, void 0, void 0, function* () {
                    if (newFolder &&
                        this.plugin.settings.folders.some((e) => e.folder == newFolder)) {
                        console.error("ForceViewMode: 该文件夹已关联了一个模板", newFolder);
                        return;
                    }
                    this.plugin.settings.folders[index].folder = newFolder;
                    yield this.plugin.saveSettings();
                }));
            })
                .addDropdown(cb => {
                modes.forEach(mode => {
                    cb.addOption(mode, mode);
                });
                cb.setValue(folderMode.viewMode || "默认")
                    .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.folders[index].viewMode = value;
                    yield this.plugin.saveSettings();
                }));
            })
                .addExtraButton((cb) => {
                cb.setIcon("cross")
                    .setTooltip("删除")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.folders.splice(index, 1);
                    yield this.plugin.saveSettings();
                    this.display();
                }));
            });
            s.infoEl.remove();
            div.appendChild(containerEl.lastChild);
        });
        createHeader("文件");
        const filesDesc = document.createDocumentFragment();
        filesDesc.append("为具有特定样式的笔记指定视图模式（正则表达式；例如 \" - All$\" 是所有结尾带有 \" - All\" 的笔记；以及 \"1900-01\" 是所有开头带有 \"1900-01\" 的日记", filesDesc.createEl("br"), "请注意，这将强制使用视图模式，即使其属性中设置了不同的视图模式也是如此。", filesDesc.createEl("br"), "优先级从下（最高）到上（最低）。", filesDesc.createEl("br"), "请注意，配置文件模式将覆盖同一文件的文件夹配置。");
        new obsidian.Setting(this.containerEl).setDesc(filesDesc);
        new obsidian.Setting(this.containerEl)
            .setDesc("添加新文件")
            .addButton((button) => {
            button
                .setTooltip("将其他文件添加到列表中")
                .setButtonText("+")
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.files.push({
                    filePattern: "",
                    viewMode: "",
                });
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        this.plugin.settings.files.forEach((file, index) => {
            const div = containerEl.createEl("div");
            div.addClass("force-view-mode-div");
            div.addClass("force-view-mode-folder");
            const s = new obsidian.Setting(this.containerEl)
                .addSearch((cb) => {
                cb.setPlaceholder(`例如： " - All$" or "1900-01")`)
                    .setValue(file.filePattern)
                    .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    if (value &&
                        this.plugin.settings.files.some((e) => e.filePattern == value)) {
                        console.error("ForceViewMode: 模式已经存在", value);
                        return;
                    }
                    this.plugin.settings.files[index].filePattern = value;
                    yield this.plugin.saveSettings();
                }));
            })
                .addDropdown((cb) => {
                modes.forEach((mode) => {
                    cb.addOption(mode, mode);
                });
                cb.setValue(file.viewMode || "默认").onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.files[index].viewMode = value;
                    yield this.plugin.saveSettings();
                }));
            })
                .addExtraButton((cb) => {
                cb.setIcon("cross")
                    .setTooltip("删除")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.files.splice(index, 1);
                    yield this.plugin.saveSettings();
                    this.display();
                }));
            });
            s.infoEl.remove();
            div.appendChild(containerEl.lastChild);
        });
    }
}

module.exports = ViewModeByFrontmatterPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
